<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>LISA - NFT Gifts Game</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #FF7F00;
            --secondary: #FFAA33;
            --accent: #FF5500;
            --dark: #1A1A1A;
            --light: #FFFFFF;
            --success: #00B894;
            --danger: #FF3333;
            --black-bg: #000000;
            --card-bg: rgba(40, 40, 40, 0.8);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, var(--dark), #2A2A2A);
            color: var(--light);
            padding: 12px;
            padding-bottom: 80px;
            line-height: 1.6;
        }
        
        .container {
            max-width: 100%;
            margin: 0 auto;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: rgba(40, 40, 40, 0.8);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            margin-bottom: 16px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 127, 0, 0.3);
        }
        
        .logo {
            font-size: 24px;
            font-weight: 800;
            color: var(--primary);
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .logo-img {
            width: 36px;
            height: 36px;
            background: linear-gradient(45deg, var(--primary), var(--accent));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
        }
        
        .profile {
            display: flex;
            align-items: center;
            background: rgba(0, 0, 0, 0.3);
            padding: 10px 16px;
            border-radius: 20px;
            gap: 8px;
        }
        
        .points {
            font-size: 16px;
            font-weight: 700;
            color: var(--primary);
        }
        
        .section {
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 16px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 127, 0, 0.2);
        }
        
        .section-title {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 16px;
            color: var(--primary);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .btn {
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            border: none;
            color: white;
            padding: 12px 20px;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            transition: all 0.2s ease;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(255, 127, 0, 0.4);
        }
        
        .btn:disabled {
            background: #636e72;
            color: #b2bec3;
            transform: none;
            box-shadow: none;
            cursor: not-allowed;
        }
        
        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .btn-black {
            background: var(--black-bg);
            border: 1px solid #333;
        }
        
        .btn-small {
            padding: 8px 15px;
            font-size: 14px;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(40, 40, 40, 0.95);
            backdrop-filter: blur(10px);
            display: flex;
            justify-content: space-around;
            padding: 12px 0;
            border-top: 1px solid rgba(255, 127, 0, 0.3);
            z-index: 100;
        }
        
        .nav-item {
            text-align: center;
            font-size: 12px;
            color: #b2bec3;
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 4px;
        }
        
        .nav-item.active {
            color: var(--primary);
        }
        
        .nav-icon {
            font-size: 20px;
        }
        
        /* Стили для главного экрана */
        .stats {
            display: flex;
            justify-content: space-around;
            margin: 15px 0;
        }
        
        .stat-item {
            text-align: center;
            background: rgba(0, 0, 0, 0.3);
            padding: 10px;
            border-radius: 12px;
            flex: 1;
            margin: 0 5px;
        }
        
        .stat-value {
            font-size: 18px;
            font-weight: bold;
            color: var(--primary);
        }
        
        .stat-label {
            font-size: 12px;
            color: #aaa;
        }
        
        /* Профессиональный дизайн для обмена */
        .exchange {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(0, 0, 0, 0.4);
            padding: 15px;
            border-radius: 15px;
            margin: 15px 0;
            border: 1px solid rgba(255, 127, 0, 0.2);
        }
        
        .currency {
            display: flex;
            flex-direction: column;
            align-items: center;
            flex: 1;
        }
        
        .currency-value {
            font-size: 18px;
            font-weight: bold;
            color: var(--primary);
        }
        
        .currency-label {
            font-size: 14px;
            color: #aaa;
            margin-top: 5px;
        }
        
        .exchange-btn {
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            border: none;
            color: #000;
            padding: 10px 20px;
            border-radius: 20px;
            font-weight: bold;
            cursor: pointer;
            margin: 0 15px;
            min-width: 120px;
        }
        
        /* Стили для заданий */
        .tasks-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 12px;
        }
        
        .task-item {
            background: rgba(0, 0, 0, 0.4);
            border-radius: 12px;
            padding: 15px;
            text-align: center;
        }
        
        .task-title {
            font-size: 16px;
            margin-bottom: 10px;
            min-height: 20px;
            font-weight: 600;
        }
        
        .task-reward {
            color: var(--primary);
            font-weight: bold;
            margin-bottom: 10px;
            font-size: 14px;
        }
        
        .task-progress {
            height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
            margin: 10px 0;
            overflow: hidden;
        }
        
        .task-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            border-radius: 3px;
            width: 0%;
        }
        
        /* Стили для инвентаря */
        .inventory-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 12px;
        }
        
        .nft-item {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 12px;
            overflow: hidden;
            text-align: center;
            transition: transform 0.2s;
            position: relative;
        }
        
        .nft-item:hover {
            transform: scale(1.03);
        }
        
        .nft-image {
            width: 100%;
            aspect-ratio: 1/1;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }
        
        .nft-gif {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .nft-info {
            padding: 10px;
        }
        
        .nft-name {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 4px;
        }
        
        .nft-value {
            font-size: 12px;
            color: var(--primary);
        }
        
        .nft-actions {
            display: flex;
            gap: 5px;
            margin-top: 8px;
        }
        
        .nft-action-btn {
            flex: 1;
            padding: 5px;
            background: rgba(255, 255, 255, 0.1);
            border: none;
            border-radius: 6px;
            color: white;
            font-size: 12px;
            cursor: pointer;
        }
        
        .nft-action-btn.sell {
            background: var(--primary);
        }
        
        /* Стили для рулетки */
        .roulette-types {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
            margin-bottom: 20px;
        }
        
        .roulette-type {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .roulette-type:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(255, 127, 0, 0.3);
        }
        
        .roulette-type i {
            font-size: 36px;
            margin-bottom: 10px;
            color: var(--primary);
        }
        
        .roulette-type.black i {
            color: white;
        }
        
        .roulette-type.black {
            background: linear-gradient(135deg, #000000, #333333);
        }
        
        .roulette-container {
            text-align: center;
        }
        
        .free-spin {
            background: rgba(255, 127, 0, 0.2);
            padding: 15px;
            border-radius: 12px;
            margin-bottom: 20px;
        }
        
        .spin-timer {
            font-size: 18px;
            font-weight: 700;
            color: var(--primary);
            margin: 10px 0;
        }
        
        .chance-buttons {
            display: flex;
            gap: 10px;
            margin: 15px 0;
        }
        
        .chance-btn {
            flex: 1;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            border: none;
            color: white;
            font-weight: 600;
            cursor: pointer;
        }
        
        .chance-btn.active {
            background: linear-gradient(90deg, var(--primary), var(--secondary));
        }
        
        .live-wins {
            margin-top: 20px;
        }
        
        .wins-container {
            display: flex;
            gap: 10px;
            overflow-x: auto;
            padding: 10px 0;
        }
        
        .win-item {
            min-width: 80px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 10px;
            text-align: center;
        }
        
        .win-image {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            margin: 0 auto 8px;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .win-gif {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        /* Черная рулетка */
        .black-roulette {
            background: var(--black-bg);
            border: 1px solid #333;
        }
        
        .black-roulette .section-title {
            color: white;
        }
        
        /* Таблица лидеров */
        .leaderboard-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .leader-item {
            display: flex;
            align-items: center;
            gap: 12px;
            background: rgba(255, 255, 255, 0.05);
            padding: 12px;
            border-radius: 12px;
        }
        
        .leader-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
        }
        
        .leader-info {
            flex: 1;
        }
        
        .leader-name {
            font-weight: 600;
            margin-bottom: 3px;
        }
        
        .leader-stars {
            color: var(--primary);
            font-size: 14px;
        }
        
        .leader-nft {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .leader-nft-gif {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        /* Магазин */
        .shop-items {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .shop-item {
            display: flex;
            align-items: center;
            gap: 15px;
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 12px;
        }
        
        .shop-item-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }
        
        .shop-item-info {
            flex: 1;
        }
        
        .shop-item-title {
            font-weight: 600;
            margin-bottom: 5px;
        }
        
        .shop-item-desc {
            font-size: 14px;
            color: #aaa;
            margin-bottom: 5px;
        }
        
        .shop-item-price {
            color: var(--primary);
            font-weight: 600;
        }
        
        /* История */
        .history-filters {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            overflow-x: auto;
            padding-bottom: 5px;
        }
        
        .history-filter {
            padding: 8px 15px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 20px;
            font-size: 14px;
            white-space: nowrap;
        }
        
        .history-filter.active {
            background: linear-gradient(90deg, var(--primary), var(--secondary));
        }
        
        .history-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .history-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 12px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 12px;
        }
        
        .history-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(255, 127, 0, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
        }
        
        .history-info {
            flex: 1;
            min-width: 0;
        }
        
        .history-title {
            font-weight: 600;
            margin-bottom: 3px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .history-date {
            font-size: 12px;
            color: #aaa;
        }
        
        .history-amount {
            font-weight: 600;
            color: var(--primary);
            white-space: nowrap;
        }
        
        /* Профиль */
        .profile-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 20px;
            padding: 15px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 16px;
        }
        
        .profile-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 36px;
        }
        
        .profile-info {
            flex: 1;
            min-width: 0;
        }
        
        .profile-name {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 5px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .profile-balance {
            color: var(--primary);
            font-weight: 600;
        }
        
        .referral-section {
            margin-top: 20px;
        }
        
        .referral-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .referral-stat {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 12px;
            text-align: center;
        }
        
        .referral-stat-value {
            font-size: 18px;
            font-weight: 700;
            color: var(--primary);
            margin-bottom: 5px;
        }
        
        .referral-stat-label {
            font-size: 14px;
            color: #aaa;
        }
        
        /* Анимации */
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .pulse {
            animation: pulse 2s infinite;
        }
        
        /* Уведомления */
        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(40, 40, 40, 0.95);
            backdrop-filter: blur(10px);
            color: var(--primary);
            padding: 12px 20px;
            border-radius: 12px;
            z-index: 1000;
            display: none;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 127, 0, 0.3);
        }
        
        /* Модальные окна */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        
        .modal-content {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 20px;
            width: 90%;
            max-width: 400px;
            text-align: center;
            border: 1px solid rgba(255, 127, 0, 0.3);
        }
        
        .modal-gif {
            width: 150px;
            height: 150px;
            margin: 0 auto 15px;
            border-radius: 12px;
            overflow: hidden;
        }
        
        .modal-title {
            font-size: 20px;
            font-weight: 700;
            margin-bottom: 10px;
            color: var(--primary);
        }
        
        .modal-text {
            margin-bottom: 20px;
        }
        
        .close-modal {
            background: var(--primary);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
        }
        
        /* Адаптивность */
        @media (max-width: 480px) {
            .inventory-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .tasks-grid {
                grid-template-columns: 1fr;
            }
            
            .referral-stats {
                grid-template-columns: 1fr;
            }
            
            .exchange {
                flex-direction: column;
                gap: 15px;
            }
            
            .exchange-btn {
                margin: 10px 0;
                width: 100%;
            }
            
            .bottom-nav {
                overflow-x: auto;
                justify-content: flex-start;
            }
            
            .nav-item {
                min-width: 60px;
            }
        }
    </style>
</head>
<body>
    <div class="notification" id="notification">Задание выполнено!</div>
    
    <!-- Модальное окно выигрыша -->
    <div class="modal" id="win-modal">
        <div class="modal-content">
            <div class="modal-gif">
                <img src="https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" class="nft-gif">
            </div>
            <div class="modal-title">Поздравляем!</div>
            <div class="modal-text">Вы выиграли: <span id="win-name">NFT Gift</span> стоимостью <span id="win-value">0</span> Stars</div>
            <button class="close-modal" onclick="closeModal()">Забрать приз</button>
        </div>
    </div>
    
    <!-- Модальное окно продажи NFT -->
    <div class="modal" id="sell-modal">
        <div class="modal-content">
            <div class="modal-gif">
                <img src="https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" id="sell-nft-gif" class="nft-gif">
            </div>
            <div class="modal-title">Продать NFT</div>
            <div class="modal-text">Вы уверены, что хотите продать <span id="sell-nft-name">NFT Gift</span> за <span id="sell-nft-value">0</span> Stars?</div>
            <div class="modal-text">После продажи NFT будет удален из вашего инвентаря</div>
            <button class="btn" onclick="confirmSell()">ПРОДАТЬ</button>
            <button class="btn btn-secondary" onclick="closeModal()" style="margin-top: 10px;">ОТМЕНА</button>
        </div>
    </div>
    
    <!-- Модальное окно рефералов -->
    <div class="modal" id="referral-modal">
        <div class="modal-content">
            <div class="modal-title">Реферальная программа</div>
            
            <div class="referral-stats">
                <div class="referral-stat">
                    <div class="referral-stat-value">⭐ 150</div>
                    <div class="referral-stat-label">Доступно</div>
                </div>
                
                <div class="referral-stat">
                    <div class="referral-stat-value">⭐ 350</div>
                    <div class="referral-stat-label">Заблокировано</div>
                </div>
            </div>
            
            <div class="modal-text">
                Средства заблокированного баланса можно вывести через 21 день после начисления
            </div>
            
            <div class="modal-text">
                Приглашайте друзей и получайте 10% от их депозита
            </div>
            
            <button class="btn" onclick="copyReferralLink()">
                <i class="fas fa-user-plus"></i> Пригласить
            </button>
            
            <button class="btn btn-secondary" onclick="closeModal()" style="margin-top: 10px;">
                Закрыть
            </button>
        </div>
    </div>
    
    <div class="container">
        <div class="header">
            <div class="logo">
                <div class="logo-img">🦊</div>
                <span>LISA</span>
            </div>
            <div class="profile">
                <i class="fas fa-star" style="color: gold;"></i>
                <div class="points" id="points">0</div>
            </div>
        </div>
        
        <!-- Главная вкладка -->
        <div class="tab-content active" id="main-tab">
            <div class="section">
                <div class="section-title">
                    <span>Добро пожаловать в LISA!</span>
                </div>
                <div class="stats">
                    <div class="stat-item">
                        <div class="stat-value" id="total-points">0</div>
                        <div class="stat-label">Всего очков</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="lisa-value">0</div>
                        <div class="stat-label">LISA</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="stars">0</div>
                        <div class="stat-label">STARS</div>
                    </div>
                </div>
                
                <!-- Профессиональный блок обмена -->
                <div class="exchange">
                    <div class="currency">
                        <div class="currency-value" id="exchange-lisa">0</div>
                        <div class="currency-label">LISA</div>
                    </div>
                    <button class="exchange-btn" onclick="exchangeLisa()">ОБМЕНЯТЬ</button>
                    <div class="currency">
                        <div class="currency-value" id="exchange-stars">0</div>
                        <div class="currency-label">STARS</div>
                    </div>
                </div>
            </div>
            
            <div class="section">
                <div class="section-title">
                    <span>БЫСТРЫЕ ДЕЙСТВИЯ</span>
                </div>
                
                <div class="tasks-grid">
                    <div class="task-item">
                        <div class="task-title">Ежедневный бонус</div>
                        <div class="task-reward">+100 очков</div>
                        <button class="btn" onclick="switchTab('tasks-tab')">
                            ПОЛУЧИТЬ
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="section">
                <div class="section-title">
                    <span>ЛИДЕРЫ</span>
                    <span>></span>
                </div>
                <div id="leaders-container" style="text-align: center; padding: 20px; color: #aaa;">
                    Топ игроков появится здесь
                </div>
            </div>
        </div>
        
        <!-- Вкладка заданий -->
        <div class="tab-content" id="tasks-tab">
            <div class="section">
                <div class="section-title">
                    <span>ЕЖЕДНЕВНЫЕ ЗАДАНИЯ</span>
                </div>
                
                <div class="tasks-grid" id="daily-tasks-container">
                    <!-- Задания будут добавлены динамически -->
                </div>
            </div>
            
            <div class="section">
                <div class="section-title">
                    <span>КВЕСТЫ</span>
                </div>
                
                <div class="tasks-grid" id="quests-container">
                    <!-- Квесты будут добавлены динамически -->
                </div>
            </div>
        </div>
        
        <!-- Вкладка инвентаря -->
        <div class="tab-content" id="inventory-tab">
            <div class="section">
                <div class="section-title">
                    <span>ИНВЕНТАРЬ</span>
                    <span>Ваши NFT подарки</span>
                </div>
                
                <div class="inventory-grid" id="inventory-container">
                    <!-- NFT будут добавлены динамически -->
                </div>
            </div>
        </div>
        
        <!-- Вкладка рулетки -->
        <div class="tab-content" id="roulette-tab">
            <div class="section">
                <div class="section-title">
                    <span>РУЛЕТКА NFT ПОДАРКОВ</span>
                </div>
                
                <div class="roulette-types">
                    <div class="roulette-type" onclick="selectRouletteType('regular')">
                        <i class="fas fa-gift"></i>
                        <div>Обычная рулетка</div>
                    </div>
                    
                    <div class="roulette-type black" onclick="selectRouletteType('black')">
                        <i class="fas fa-moon"></i>
                        <div>Черная рулетка</div>
                    </div>
                </div>
                
                <div class="roulette-container" id="regular-roulette" style="display: none;">
                    <div class="free-spin">
                        <div>БЕСПЛАТНОЕ ВРАЩЕНИЕ ЧЕРЕЗ:</div>
                        <div class="spin-timer" id="countdown">23:43:24</div>
                        <button class="btn" id="free-spin-btn" onclick="spinFreeRoulette()" disabled>КРУТИТЬ БЕСПЛАТНО</button>
                    </div>
                    
                    <div class="chance-buttons">
                        <button class="chance-btn active" onclick="selectChance(1)">1x ШАНС<br>200 stars</button>
                        <button class="chance-btn" onclick="selectChance(10)">10x ШАНС<br>1,500 stars</button>
                        <button class="chance-btn" onclick="selectChance(100)">100x ШАНС<br>15,000 stars</button>
                    </div>
                    
                    <button class="btn" id="spin-btn" onclick="spinRoulette()">КРУТИТЬ ЗА 200 stars</button>
                    
                    <div class="live-wins">
                        <div class="section-title">
                            <span>ВЫИГРЫШИ В ПРЯМОМ ЭФИРЕ</span>
                        </div>
                        
                        <div class="wins-container" id="live-wins-container">
                            <!-- Выигрыши будут добавлены динамически -->
                        </div>
                    </div>
                </div>
                
                <div class="roulette-container black-roulette" id="black-roulette" style="display: none;">
                    <div class="section-title">
                        <span>ЧЕРНАя РУЛЕТКА</span>
                        <span>ТОЛЬКО ЧЕРНЫЕ ФОНЫ</span>
                    </div>
                    
                    <p style="margin-bottom: 15px; text-align: center;">Эксклюзивные NFT подарки с черным фоном</p>
                    
                    <button class="btn btn-black" id="black-spin-btn" onclick="spinBlackRoulette()">
                        КРУТИТЬ ЗА 10,000 stars
                    </button>
                    
                    <div class="live-wins">
                        <div class="section-title">
                            <span>ВЫИГРЫШИ В ПРЯМОМ ЭФИРЕ</span>
                        </div>
                        
                        <div class="wins-container" id="black-live-wins-container">
                            <!-- Выигрыши будут добавлены динамически -->
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="section">
                <div class="section-title">
                    <span>ТАБЛИЦА ЛИДЕРОВ</span>
                </div>
                
                <div class="leaderboard-list" id="roulette-leaders-container">
                    <!-- Лидеры будут добавлены динамически -->
                </div>
            </div>
        </div>
        
        <!-- Вкладка магазина -->
        <div class="tab-content" id="shop-tab">
            <div class="section">
                <div class="section-title">
                    <span>МАГАЗИН</span>
                    <span>Прокачки и обмен</span>
                </div>
                
                <div class="exchange">
                    <div class="currency">
                        <div class="currency-value" id="shop-lisa-value">0</div>
                        <div class="currency-label">LISA</div>
                    </div>
                    <button class="exchange-btn" onclick="exchangeLisa()">ОБМЕНЯТЬ</button>
                    <div class="currency">
                        <div class="currency-value" id="shop-stars-value">0</div>
                        <div class="currency-label">STARS</div>
                    </div>
                </div>
                
                <div class="shop-items" id="shop-items-container">
                    <!-- Товары будут добавлены динамически -->
                </div>
            </div>
        </div>
        
        <!-- Вкладка истории -->
        <div class="tab-content" id="history-tab">
            <div class="section">
                <div class="section-title">
                    <span>ИСТОРИЯ ОПЕРАЦИЙ</span>
                </div>
                
                <div class="history-filters">
                    <div class="history-filter active" onclick="filterHistory('all')">Все</div>
                    <div class="history-filter" onclick="filterHistory('deposit')">Пополнения</div>
                    <div class="history-filter" onclick="filterHistory('withdraw')">Выводы</div>
                    <div class="history-filter" onclick="filterHistory('win')">Выигрыши</div>
                    <div class="history-filter" onclick="filterHistory('task')">Задания</div>
                    <div class="history-filter" onclick="filterHistory('sell')">Продажи</div>
                </div>
                
                <div class="history-list" id="history-list">
                    <!-- История будет добавлена динамически -->
                </div>
            </div>
        </div>
        
        <!-- Вкладка профиля -->
        <div class="tab-content" id="profile-tab">
            <div class="section">
                <div class="profile-header">
                    <div class="profile-avatar">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="profile-info">
                        <div class="profile-name" id="profile-username">Username</div>
                        <div class="profile-balance">⭐ <span id="profile-stars">0</span> • <span id="profile-lisa">0</span> LISA</div>
                    </div>
                </div>
                
                <button class="btn" onclick="openReferralModal()">
                    <i class="fas fa-user-friends"></i> Реферальная программа
                </button>
                
                <div class="referral-section">
                    <div class="section-title">
                        <span>РЕФЕРАЛЫ</span>
                    </div>
                    
                    <div class="referral-stats">
                        <div class="referral-stat">
                            <div class="referral-stat-value">5</div>
                            <div class="referral-stat-label">Приглашено</div>
                        </div>
                        
                        <div class="referral-stat">
                            <div class="referral-stat-value">⭐ 150</div>
                            <div class="referral-stat-label">Заработано</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="bottom-nav">
            <div class="nav-item active" onclick="switchTab('main-tab')">
                <div class="nav-icon"><i class="fas fa-home"></i></div>
                <div>Главная</div>
            </div>
            <div class="nav-item" onclick="switchTab('tasks-tab')">
                <div class="nav-icon"><i class="fas fa-tasks"></i></div>
                <div>Задания</div>
            </div>
            <div class="nav-item" onclick="switchTab('inventory-tab')">
                <div class="nav-icon"><i class="fas fa-box-open"></i></div>
                <div>Инвентарь</div>
            </div>
            <div class="nav-item" onclick="switchTab('roulette-tab')">
                <div class="nav-icon"><i class="fas fa-dice"></i></div>
                <div>Рулетка</div>
            </div>
            <div class="nav-item" onclick="switchTab('shop-tab')">
                <div class="nav-icon"><i class="fas fa-store"></i></div>
                <div>Магазин</div>
            </div>
            <div class="nav-item" onclick="switchTab('history-tab')">
                <div class="nav-icon"><i class="fas fa-history"></i></div>
                <div>История</div>
            </div>
            <div class="nav-item" onclick="switchTab('profile-tab')">
                <div class="nav-icon"><i class="fas fa-user"></i></div>
                <div>Профиль</div>
            </div>
        </div>
    </div>

    <script>
        // Инициализация Telegram Web App
        let tg = window.Telegram.WebApp;
        tg.expand();
        tg.enableClosingConfirmation();
        
        // Данные пользователя
        let userData = {
            points: 0,           // Очки (копятся автоматически)
            lisa: 0,            // LISA (копятся автоматически)
            stars: 0,           // Stars (НЕ копятся автоматически)
            boosts: 1,          // Множитель по умолчанию
            lastUpdate: Date.now(),
            selectedChance: 1,
            selectedRoulette: null,
            completedTasks: {},
            inventory: [],
            history: [],
            lastFreeSpin: 0,
            lastTaskUpdate: Date.now(),
            referralCount: 0,
            referralEarnings: 0
        };
        
        // Текущий NFT для продажи
        let currentSellNft = null;
        
        // Данные игры
        const gameData = {
            regularRewards: [
                { id: 1, name: "Golden Star", value: 5000, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" },
                { id: 2, name: "Diamond Heart", value: 3000, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" },
                { id: 3, name: "Cosmic Fox", value: 25000, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" },
                { id: 4, name: "Rainbow Unicorn", value: 12500, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" },
                { id: 5, name: "Space Rocket", value: 8000, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" },
                { id: 6, name: "Magic Crystal", value: 15000, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" }
            ],
            blackRewards: [
                { id: 101, name: "Black Diamond", value: 50000, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" },
                { id: 102, name: "Dark Knight", value: 45000, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" },
                { id: 103, name: "Shadow Wolf", value: 35000, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" },
                { id: 104, name: "Midnight Star", value: 40000, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" },
                { id: 105, name: "Obsidian Dragon", value: 60000, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" },
                { id: 106, name: "Phantom Cat", value: 55000, gif: "https://media.tenor.com/8tLf6G3u6E0AAAAC/telegram-star.gif" }
            ],
            tasks: [
                { id: "daily", title: "Ежедневный бонус", reward: 100, type: "daily", cooldown: 86400000 },
                { id: "share", title: "Поделиться историей", reward: 500, type: "daily", cooldown: 86400000 },
                { id: "friends", title: "Пригласить друзей", reward: 1000, type: "quest" },
                { id: "channel", title: "Подписка на канал", reward: 750, type: "quest" },
                { id: "spin1", title: "Сделать 1 вращение", reward: 200, type: "quest" },
                { id: "spin5", title: "Сделать 5 вращений", reward: 1000, type: "quest" },
                { id: "exchange", title: "Обменять LISA", reward: 300, type: "quest" },
                { id: "sell1", title: "Продать 1 NFT", reward: 500, type: "quest" }
            ],
            shopItems: [
                { id: 1, name: "Ускорение x2", desc: "Удваивает скорость накопления LISA", price: 200, boost: 2 },
                { id: 2, name: "Ускорение x3", desc: "Утраивает скорость накопления LISA", price: 500, boost: 3 },
                { id: 3, name: "Ускорение x5", desc: "Пятерит скорость накопления LISA", price: 1000, boost: 5 },
                { id: 4, name: "Ускорение x10", desc: "Десятерит скорость накопления LISA", price: 3000, boost: 10 }
            ],
            leaders: [
                { id: 1, name: "Алексей", stars: 125800, nft: 1 },
                { id: 2, name: "Мария", stars: 98500, nft: 2 },
                { id: 3, name: "Дмитрий", stars: 87200, nft: 3 },
                { id: 4, name: "Ольга", stars: 75400, nft: 4 },
                { id: 5, name: "Иван", stars: 68300, nft: 5 }
            ],
            liveWins: []
        };
        
        // Загрузка данных из локального хранилища
        function loadUserData() {
            const savedData = localStorage.getItem('lisaUserData');
            if (savedData) {
                try {
                    const parsedData = JSON.parse(savedData);
                    // Объединяем с текущими userData, чтобы сохранить новые поля
                    userData = { ...userData, ...parsedData };
                    userData.lastUpdate = Date.now();
                } catch (e) {
                    console.error('Error parsing saved data', e);
                }
            }
            updateAllDisplays();
            renderInventory();
            renderHistory();
            renderTasks();
            renderShopItems();
            renderLeaders();
            updateLiveWins();
        }
        
        // Сохранение данных в локальное хранилище
        function saveUserData() {
            localStorage.setItem('lisaUserData', JSON.stringify(userData));
        }
        
        // Функция для обновления очков (1 очко в секунду с учетом бустов)
        function updatePoints() {
            const now = Date.now();
            const secondsPassed = Math.floor((now - userData.lastUpdate) / 1000);
            
            if (secondsPassed > 0) {
                userData.points += secondsPassed * userData.boosts;
                userData.lisa += secondsPassed * userData.boosts;
                userData.lastUpdate = now;
                
                // Обновляем отображение
                updateAllDisplays();
                saveUserData();
            }
            
            // Проверяем появление новых заданий каждые 30 минут
            if (now - userData.lastTaskUpdate > 1800000) { // 30 минут в миллисекундах
                userData.lastTaskUpdate = now;
                resetDailyTasks();
            }
        }
        
        // Сброс ежедневных заданий
        function resetDailyTasks() {
            for (const taskId in userData.completedTasks) {
                if (gameData.tasks.find(t => t.id === taskId && t.type === "daily")) {
                    delete userData.completedTasks[taskId];
                }
            }
            renderTasks();
            saveUserData();
        }
        
        // Обновление всех отображаемых значений
        function updateAllDisplays() {
            // Обновляем верхний бар
            document.getElementById('points').textContent = userData.stars.toLocaleString();
            
            // Обновляем главный экран
            document.getElementById('total-points').textContent = userData.points.toLocaleString();
            document.getElementById('lisa-value').textContent = userData.lisa.toLocaleString();
            document.getElementById('stars').textContent = userData.stars.toLocaleString();
            
            // Обновляем блок обмена
            document.getElementById('exchange-lisa').textContent = userData.lisa.toLocaleString();
            document.getElementById('exchange-stars').textContent = userData.stars.toLocaleString();
            
            // Обновляем магазин
            document.getElementById('shop-lisa-value').textContent = userData.lisa.toLocaleString();
            document.getElementById('shop-stars-value').textContent = userData.stars.toLocaleString();
            
            // Обновляем профиль
            document.getElementById('profile-stars').textContent = userData.stars.toLocaleString();
            document.getElementById('profile-lisa').textContent = userData.lisa.toLocaleString();
        }
        
        // Рендер инвентаря
        function renderInventory() {
            const container = document.getElementById('inventory-container');
            if (!container) return;
            
            if (userData.inventory.length === 0) {
                container.innerHTML = '<div style="text-align: center; padding: 20px; color: #aaa;">Ваш инвентарь пуст</div>';
                return;
            }
            
            container.innerHTML = userData.inventory.map((nft, index) => `
                <div class="nft-item">
                    <div class="nft-image">
                        <img src="${nft.gif}" class="nft-gif">
                    </div>
                    <div class="nft-info">
                        <div class="nft-name">${nft.name}</div>
                        <div class="nft-value">⭐ ${nft.value.toLocaleString()}</div>
                        <div class="nft-actions">
                            <button class="nft-action-btn" onclick="openSellModal(${index})">Продать</button>
                        </div>
                    </div>
                </div>
            `).join('');
        }
        
        // Открытие модального окна продажи NFT
        function openSellModal(index) {
            currentSellNft = userData.inventory[index];
            
            document.getElementById('sell-nft-name').textContent = currentSellNft.name;
            document.getElementById('sell-nft-value').textContent = currentSellNft.value.toLocaleString();
            document.getElementById('sell-nft-gif').src = currentSellNft.gif;
            
            document.getElementById('sell-modal').style.display = 'flex';
        }
        
        // Подтверждение продажи NFT
        function confirmSell() {
            if (!currentSellNft) return;
            
            // Находим индекс NFT в инвентаре
            const index = userData.inventory.findIndex(nft => 
                nft.id === currentSellNft.id && 
                nft.name === currentSellNft.name
            );
            
            if (index === -1) {
                showNotification('NFT не найден в инвентаре!');
                return;
            }
            
            // Удаляем NFT из инвентаря
            userData.inventory.splice(index, 1);
            
            // Добавляем Stars за продажу
            userData.stars += currentSellNft.value;
            
            // Добавляем запись в историю
            userData.history.unshift({
                type: 'sell',
                title: 'Продажа NFT: ' + currentSellNft.name,
                reward: { stars: currentSellNft.value },
                timestamp: new Date()
            });
            
            // Проверяем задание на продажу
            if (!userData.completedTasks['sell1']) {
                completeTask('sell1');
            }
            
            showNotification(`NFT продан за ${currentSellNft.value.toLocaleString()} Stars!`);
            
            // Обновляем отображение
            updateAllDisplays();
            renderInventory();
            renderHistory();
            saveUserData();
            
            // Закрываем модальное окно
            closeModal();
            currentSellNft = null;
        }
        
        // Рендер истории
        function renderHistory(filter = 'all') {
            const container = document.getElementById('history-list');
            if (!container) return;
            
            if (userData.history.length === 0) {
                container.innerHTML = '<div style="text-align: center; padding: 20px; color: #aaa;">История операций пуста</div>';
                return;
            }
            
            let filteredHistory = userData.history;
            if (filter !== 'all') {
                filteredHistory = userData.history.filter(item => item.type === filter);
            }
            
            if (filteredHistory.length === 0) {
                container.innerHTML = '<div style="text-align: center; padding: 20px; color: #aaa;">Нет операций этого типа</div>';
                return;
            }
            
            container.innerHTML = filteredHistory.map(item => {
                let icon = 'fa-star';
                if (item.type === 'exchange') icon = 'fa-exchange-alt';
                if (item.type === 'task') icon = 'fa-gift';
                if (item.type === 'boost') icon = 'fa-bolt';
                if (item.type === 'sell') icon = 'fa-coins';
                
                const date = new Date(item.timestamp);
                const formattedDate = formatDate(date);
                
                return `
                <div class="history-item">
                    <div class="history-icon">
                        <i class="fas ${icon}"></i>
                    </div>
                    <div class="history-info">
                        <div class="history-title">${item.title}</div>
                        <div class="history-date">${formattedDate}</div>
                    </div>
                    <div class="history-amount">${item.type === 'win' || item.type === 'exchange' || item.type === 'sell' ? '+' : ''}${item.reward.stars ? '⭐ ' + item.reward.stars.toLocaleString() : item.reward.points ? item.reward.points + ' очков' : 'Ускорение x' + item.reward.boost}</div>
                </div>
                `;
            }).join('');
        }
        
        // Форматирование даты
        function formatDate(date) {
            const now = new Date();
            const diff = now - date;
            
            if (diff < 60000) return 'Только что';
            if (diff < 3600000) return `${Math.floor(diff / 60000)} мин назад`;
            if (diff < 86400000) return `${Math.floor(diff / 3600000)} ч назад`;
            
            return date.toLocaleDateString('ru-RU');
        }
        
        // Рендер заданий
        function renderTasks() {
            const dailyContainer = document.getElementById('daily-tasks-container');
            const questsContainer = document.getElementById('quests-container');
            
            if (!dailyContainer || !questsContainer) return;
            
            const dailyTasks = gameData.tasks.filter(task => task.type === 'daily');
            const quests = gameData.tasks.filter(task => task.type === 'quest');
            
            dailyContainer.innerHTML = dailyTasks.map(task => {
                const completed = userData.completedTasks[task.id];
                const cooldown = task.cooldown || 0;
                const lastCompletion = userData.completedTasks[`${task.id}_time`] || 0;
                const remainingTime = lastCompletion + cooldown - Date.now();
                
                return `
                <div class="task-item" id="${task.id}-task">
                    <div class="task-title">${task.title}</div>
                    <div class="task-reward">+${task.reward} очков</div>
                    <div class="task-progress">
                        <div class="task-progress-bar" id="${task.id}-progress" style="width: ${completed ? '100%' : '0%'}"></div>
                    </div>
                    <button class="btn" onclick="completeTask('${task.id}')" id="${task.id}-btn" ${completed || remainingTime > 0 ? 'disabled' : ''}>
                        ${completed ? 'ВЫПОЛНЕНО' : 'ВЫПОЛНИТЬ'}
                    </button>
                </div>
                `;
            }).join('');
            
            questsContainer.innerHTML = quests.map(task => {
                const completed = userData.completedTasks[task.id];
                
                return `
                <div class="task-item" id="${task.id}-task">
                    <div class="task-title">${task.title}</div>
                    <div class="task-reward">+${task.reward} очков</div>
                    <div class="task-progress">
                        <div class="task-progress-bar" id="${task.id}-progress" style="width: ${completed ? '100%' : '0%'}"></div>
                    </div>
                    <button class="btn" onclick="completeTask('${task.id}')" id="${task.id}-btn" ${completed ? 'disabled' : ''}>
                        ${completed ? 'ВЫПОЛНЕНО' : 'ВЫПОЛНИТЬ'}
                    </button>
                </div>
                `;
            }).join('');
        }
        
        // Рендер товаров в магазине
        function renderShopItems() {
            const container = document.getElementById('shop-items-container');
            if (!container) return;
            
            container.innerHTML = gameData.shopItems.map(item => `
                <div class="shop-item">
                    <div class="shop-item-icon">
                        <i class="fas fa-bolt"></i>
                    </div>
                    <div class="shop-item-info">
                        <div class="shop-item-title">${item.name}</div>
                        <div class="shop-item-desc">${item.desc}</div>
                        <div class="shop-item-price">⭐ ${item.price}</div>
                    </div>
                    <button class="btn btn-small" onclick="buyBoost(${item.boost}, ${item.price})" ${userData.stars < item.price ? 'disabled' : ''}>
                        ${userData.boosts >= item.boost ? 'Куплено' : 'Купить'}
                    </button>
                </div>
            `).join('');
        }
        
        // Рендер таблицы лидеров
        function renderLeaders() {
            const container = document.getElementById('leaders-container');
            const rouletteContainer = document.getElementById('roulette-leaders-container');
            
            if (!container && !rouletteContainer) return;
            
            // Обновляем общий рейтинг пользователей
            gameData.leaders.sort((a, b) => b.stars - a.stars);
            
            const leadersHTML = gameData.leaders.map((leader, index) => {
                const nft = gameData.regularRewards.find(r => r.id === leader.nft) || gameData.regularRewards[0];
                return `
                <div class="leader-item">
                    <div class="leader-avatar">${index + 1}</div>
                    <div class="leader-info">
                        <div class="leader-name">${leader.name}</div>
                        <div class="leader-stars">⭐ ${leader.stars.toLocaleString()}</div>
                    </div>
                    <div class="leader-nft">
                        <img src="${nft.gif}" class="leader-nft-gif">
                    </div>
                </div>
                `;
            }).join('');
            
            if (container) container.innerHTML = leadersHTML;
            if (rouletteContainer) rouletteContainer.innerHTML = leadersHTML;
        }
        
        // Обновление списка live-выигрышей
        function updateLiveWins() {
            const regularContainer = document.getElementById('live-wins-container');
            const blackContainer = document.getElementById('black-live-wins-container');
            
            if (!regularContainer && !blackContainer) return;
            
            // Оставляем только последние 10 выигрышей
            if (gameData.liveWins.length > 10) {
                gameData.liveWins = gameData.liveWins.slice(-10);
            }
            
            const winsHTML = gameData.liveWins.map(win => `
                <div class="win-item">
                    <div class="win-image">
                        <img src="${win.gif}" class="win-gif">
                    </div>
                    <div>${win.name}</div>
                </div>
            `).join('');
            
            if (regularContainer) regularContainer.innerHTML = winsHTML;
            if (blackContainer) blackContainer.innerHTML = winsHTML;
        }
        
        // Добавление выигрыша в live-ленту
        function addLiveWin(win) {
            gameData.liveWins.push(win);
            updateLiveWins();
        }
        
        // Выполнение задания
        function completeTask(taskId) {
            const task = gameData.tasks.find(t => t.id === taskId);
            if (!task) return;
            
            if (userData.completedTasks[taskId]) {
                showNotification('Это задание уже выполнено!');
                return;
            }
            
            // Проверка времени для ежедневных заданий
            if (task.type === 'daily') {
                const lastCompletion = userData.completedTasks[`${taskId}_time`] || 0;
                const remainingTime = lastCompletion + task.cooldown - Date.now();
                
                if (remainingTime > 0) {
                    showNotification('Задание будет доступно позже');
                    return;
                }
            }
            
            // Выдача награды
            userData.points += task.reward;
            
            // Отмечаем задание как выполненное
            userData.completedTasks[taskId] = true;
            userData.completedTasks[`${taskId}_time`] = Date.now();
            
            // Добавляем запись в историю
            userData.history.unshift({
                type: 'task',
                title: task.title,
                reward: { points: task.reward },
                timestamp: new Date()
            });
            
            // Показываем уведомление
            showNotification('Задание выполнено! +' + task.reward + ' очков');
            
            // Обновляем отображение и сохраняем данные
            updateAllDisplays();
            renderTasks();
            renderHistory();
            saveUserData();
        }
        
        // Выбор типа рулетки
        function selectRouletteType(type) {
            userData.selectedRoulette = type;
            
            // Скрываем все рулетки
            document.getElementById('regular-roulette').style.display = 'none';
            document.getElementById('black-roulette').style.display = 'none';
            
            // Показываем выбранную
            if (type === 'regular') {
                document.getElementById('regular-roulette').style.display = 'block';
            } else {
                document.getElementById('black-roulette').style.display = 'block';
            }
        }
        
        // Выбор шанса в рулетке
        function selectChance(multiplier) {
            userData.selectedChance = multiplier;
            
            // Обновляем кнопки
            document.querySelectorAll('.chance-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Активируем выбранную кнопку
            const buttons = document.querySelectorAll('.chance-btn');
            buttons[multiplier === 1 ? 0 : multiplier === 10 ? 1 : 2].classList.add('active');
            
            // Обновляем текст кнопки спина
            const spinBtn = document.getElementById('spin-btn');
            spinBtn.textContent = `КРУТИТЬ ЗА ${multiplier === 1 ? 200 : multiplier === 10 ? 1_500 : 15_000} stars`;
        }
        
        // Вращение обычной рулетки
        function spinRoulette() {
            const cost = userData.selectedChance === 1 ? 200 : userData.selectedChance === 10 ? 1500 : 15000;
            
            if (userData.stars < cost) {
                showNotification('Недостаточно Stars для вращения!');
                return;
            }
            
            userData.stars -= cost;
            
            // Выбираем случайный приз
            const rewards = gameData.regularRewards;
            const win = rewards[Math.floor(Math.random() * rewards.length)];
            
            // Добавляем выигрыш в инвентарь
            userData.inventory.push({
                id: win.id,
                name: win.name,
                value: win.value,
                gif: win.gif
            });
            
            // Добавляем в live-выигрыши
            addLiveWin(win);
            
            // Показываем модальное окно с выигрышем
            showWinModal(win.name, win.value);
            
            // Добавляем запись в историю
            userData.history.unshift({
                type: 'win',
                title: 'Выигрыш в рулетке: ' + win.name,
                reward: { stars: win.value },
                timestamp: new Date()
            });
            
            // Обновляем задания
            checkSpinTasks();
            
            updateAllDisplays();
            renderInventory();
            renderHistory();
            saveUserData();
        }
        
        // Бесплатное вращение рулетки
        function spinFreeRoulette() {
            const now = Date.now();
            const timeSinceLastSpin = now - userData.lastFreeSpin;
            
            if (timeSinceLastSpin < 86400000) { // 24 часа
                showNotification('Бесплатное вращение будет доступно позже!');
                return;
            }
            
            userData.lastFreeSpin = now;
            
            // Выбираем случайный приз (более низкого уровня для бесплатного вращения)
            const freeRewards = gameData.regularRewards.filter(r => r.value <= 5000);
            const win = freeRewards[Math.floor(Math.random() * freeRewards.length)];
            
            // Добавляем выигрыш в инвентарь
            userData.inventory.push({
                id: win.id,
                name: win.name,
                value: win.value,
                gif: win.gif
            });
            
            // Добавляем в live-выигрыши
            addLiveWin(win);
            
            // Показываем модальное окно с выигрышем
            showWinModal(win.name, win.value);
            
            // Добавляем запись в истории
            userData.history.unshift({
                type: 'win',
                title: 'Бесплатный выигрыш в рулетке: ' + win.name,
                reward: { stars: win.value },
                timestamp: new Date()
            });
            
            updateAllDisplays();
            renderInventory();
            renderHistory();
            saveUserData();
            
            // Обновляем кнопку бесплатного вращения
            document.getElementById('free-spin-btn').disabled = true;
        }
        
        // Вращение черной рулетки
        function spinBlackRoulette() {
            const cost = 10000;
            
            if (userData.stars < cost) {
                showNotification('Недостаточно Stars для вращения!');
                return;
            }
            
            userData.stars -= cost;
            
            // Выбираем случайный приз из черной рулетки
            const rewards = gameData.blackRewards;
            const win = rewards[Math.floor(Math.random() * rewards.length)];
            
            // Добавляем выигрыш в инвентарь
            userData.inventory.push({
                id: win.id,
                name: win.name,
                value: win.value,
                gif: win.gif,
                black: true
            });
            
            // Добавляем в live-выигрыши
            addLiveWin(win);
            
            // Показываем модальное окно с выигрышем
            showWinModal(win.name, win.value);
            
            // Добавляем запись в истории
            userData.history.unshift({
                type: 'win',
                title: 'Выигрыш в черной рулетке: ' + win.name,
                reward: { stars: win.value },
                timestamp: new Date()
            });
            
            updateAllDisplays();
            renderInventory();
            renderHistory();
            saveUserData();
        }
        
        // Проверка заданий, связанных с вращениями
        function checkSpinTasks() {
            // Подсчитываем количество вращений
            const spinCount = userData.history.filter(item => item.type === 'win').length;
            
            // Проверяем задание "Сделать 1 вращение"
            if (spinCount >= 1 && !userData.completedTasks['spin1']) {
                completeTask('spin1');
            }
            
            // Проверяем задание "Сделать 5 вращений"
            if (spinCount >= 5 && !userData.completedTasks['spin5']) {
                completeTask('spin5');
            }
        }
        
        // Обмен LISA на STARS (курс 3000:1)
        function exchangeLisa() {
            if (userData.lisa < 3000) {
                showNotification('Недостаточно LISA для обмена! Минимум 3,000 LISA');
                return;
            }
            
            const starsToAdd = Math.floor(userData.lisa / 3000);
            userData.stars += starsToAdd;
            userData.lisa = userData.lisa % 3000;
            
            // Добавляем запись в историю
            userData.history.unshift({
                type: 'exchange',
                title: 'Обмен LISA на Stars',
                reward: { stars: starsToAdd },
                timestamp: new Date()
            });
            
            // Проверяем задание на обмен
            if (!userData.completedTasks['exchange']) {
                completeTask('exchange');
            }
            
            showNotification(`Обменено! Получено ${starsToAdd.toLocaleString()} Stars`);
            
            updateAllDisplays();
            renderHistory();
            saveUserData();
        }
        
        // Покупка буста
        function buyBoost(multiplier, cost) {
            if (userData.stars < cost) {
                showNotification('Недостаточно Stars для покупки!');
                return;
            }
            
            if (userData.boosts >= multiplier) {
                showNotification('У вас уже есть этот буст или лучше!');
                return;
            }
            
            userData.stars -= cost;
            userData.boosts = multiplier;
            
            // Добавляем запись в историю
            userData.history.unshift({
                type: 'boost',
                title: 'Покупка ускорения x' + multiplier,
                reward: { boost: multiplier },
                timestamp: new Date()
            });
            
            showNotification(`Ускорение x${multiplier} активировано!`);
            
            updateAllDisplays();
            renderShopItems();
            renderHistory();
            saveUserData();
        }
        
        // Открытие модального окна рефералов
        function openReferralModal() {
            document.getElementById('referral-modal').style.display = 'flex';
        }
        
        // Копирование реферальной ссылки
        function copyReferralLink() {
            const referralLink = 'https://t.me/your_bot?start=ref123456';
            navigator.clipboard.writeText(referralLink)
                .then(() => {
                    showNotification('Реферальная ссылка скопирована!');
                })
                .catch(err => {
                    showNotification('Не удалось скопировать ссылку');
                });
        }
        
        // Фильтрация истории
        function filterHistory(type) {
            // Убираем активный класс у всех фильтров
            document.querySelectorAll('.history-filter').forEach(filter => {
                filter.classList.remove('active');
            });
            
            // Добавляем активный класс к выбранному фильтру
            event.target.classList.add('active');
            
            // Рендерим отфильтрованную историю
            renderHistory(type);
        }
        
        // Показать модальное окно с выигрышем
        function showWinModal(name, value) {
            document.getElementById('win-name').textContent = name;
            document.getElementById('win-value').textContent = value.toLocaleString();
            document.getElementById('win-modal').style.display = 'flex';
            
            // Вибрация при выигрыше
            if (typeof tg !== 'undefined' && tg.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('heavy');
            }
        }
        
        // Закрыть модальное окно
        function closeModal() {
            document.getElementById('win-modal').style.display = 'none';
            document.getElementById('sell-modal').style.display = 'none';
            document.getElementById('referral-modal').style.display = 'none';
        }
        
        // Показать уведомление
        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.style.display = 'block';
            
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }
        
        // Таймер для обратного отсчета до следующего бесплатного вращения
        function updateCountdown() {
            const now = Date.now();
            const timeSinceLastSpin = now - userData.lastFreeSpin;
            const timeUntilNextSpin = 86400000 - timeSinceLastSpin;
            
            if (timeUntilNextSpin <= 0) {
                document.getElementById('countdown').textContent = '00:00:00';
                document.getElementById('free-spin-btn').disabled = false;
                return;
            }
            
            const hours = Math.floor(timeUntilNextSpin / (1000 * 60 * 60));
            const minutes = Math.floor((timeUntilNextSpin % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeUntilNextSpin % (1000 * 60)) / 1000);
            
            document.getElementById('countdown').textContent = 
                `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
            // Активируем кнопку, если таймер истек
            const freeSpinBtn = document.getElementById('free-spin-btn');
            if (freeSpinBtn && timeUntilNextSpin <= 0) {
                freeSpinBtn.disabled = false;
            }
        }
        
        // Переключение между вкладками
        function switchTab(tabId) {
            // Скрыть все вкладки
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Показать выбранную вкладку
            document.getElementById(tabId).classList.add('active');
            
            // Обновить навигацию
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            
            // Активировать соответствующую кнопку навигации
            const navItems = document.querySelectorAll('.nav-item');
            for (let item of navItems) {
                if (item.textContent.includes(
                    tabId === 'main-tab' ? 'Главная' :
                    tabId === 'tasks-tab' ? 'Задания' :
                    tabId === 'inventory-tab' ? 'Инвентарь' :
                    tabId === 'roulette-tab' ? 'Рулетка' :
                    tabId === 'shop-tab' ? 'Магазин' :
                    tabId === 'history-tab' ? 'История' : 'Профиль'
                )) {
                    item.classList.add('active');
                    break;
                }
            }
            
            // Сбрасываем выбор рулетки при переключении вкладок
            if (tabId !== 'roulette-tab') {
                userData.selectedRoulette = null;
                document.getElementById('regular-roulette').style.display = 'none';
                document.getElementById('black-roulette').style.display = 'none';
            }
            
            // При переключении на вкладку истории обновляем ее
            if (tabId === 'history-tab') {
                renderHistory();
            }
            
            // При переключении на вкладку инвентаря обновляем его
            if (tabId === 'inventory-tab') {
                renderInventory();
            }
        }
        
        // Инициализация
        document.addEventListener('DOMContentLoaded', function() {
            // Загружаем данные пользователя
            loadUserData();
            
            // Устанавливаем имя пользователя
            document.getElementById('profile-username').textContent = tg.initDataUnsafe.user?.username || 'User';
            
            // Запускаем обновление очков каждую секунду
            setInterval(updatePoints, 1000);
            
            // Запускаем обновление таймера каждую секунду
            setInterval(updateCountdown, 1000);
            updateCountdown();
        });
    </script>
</body>
</html>
